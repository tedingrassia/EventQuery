// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class resultNum extends ethereum.Event {
  get params(): resultNum__Params {
    return new resultNum__Params(this);
  }
}

export class resultNum__Params {
  _event: resultNum;

  constructor(event: resultNum) {
    this._event = event;
  }

  get firstNum(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get secondNum(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get resultNum(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EventTest extends ethereum.SmartContract {
  static bind(address: Address): EventTest {
    return new EventTest("EventTest", address);
  }

  ownersOfNum(param0: BigInt): Address {
    let result = super.call("ownersOfNum", "ownersOfNum(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_ownersOfNum(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ownersOfNum",
      "ownersOfNum(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  addNumbers(num1: BigInt, num2: BigInt): BigInt {
    let result = super.call(
      "addNumbers",
      "addNumbers(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(num1),
        ethereum.Value.fromUnsignedBigInt(num2)
      ]
    );

    return result[0].toBigInt();
  }

  try_addNumbers(num1: BigInt, num2: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addNumbers",
      "addNumbers(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(num1),
        ethereum.Value.fromUnsignedBigInt(num2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddNumbersCall extends ethereum.Call {
  get inputs(): AddNumbersCall__Inputs {
    return new AddNumbersCall__Inputs(this);
  }

  get outputs(): AddNumbersCall__Outputs {
    return new AddNumbersCall__Outputs(this);
  }
}

export class AddNumbersCall__Inputs {
  _call: AddNumbersCall;

  constructor(call: AddNumbersCall) {
    this._call = call;
  }

  get num1(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get num2(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddNumbersCall__Outputs {
  _call: AddNumbersCall;

  constructor(call: AddNumbersCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
